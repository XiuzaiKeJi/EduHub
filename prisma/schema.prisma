// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          String    @default("STUDENT")
  department    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tasks         Task[]    @relation("TaskAssignee")
  createdTasks  Task[]    @relation("TaskCreator")
  comments      Comment[]
  notifications Notification[]
  systemLogs    SystemLog[]
  backups       Backup[]
  importExports ImportExport[]
  teachingCourses Course[] @relation("CourseTeacher")
  teachingSchedules CourseSchedule[] @relation("ScheduleTeacher")
}

// 任务模型
model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("TODO")
  priority    String    @default("MEDIUM")
  startDate   DateTime?
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation("TaskCreator", fields: [creatorId], references: [id])
  creatorId   String
  assignedTo  User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  course      Course?   @relation(fields: [courseId], references: [id])
  courseId    String?
  comments    Comment[]
  attachments Attachment[]
  tags        Tag[]
  dependencies TaskDependency[] @relation("TaskDependencies")
  dependentOn  TaskDependency[] @relation("DependentOn")

  // 索引
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@index([assigneeId])
  @@index([creatorId])
}

// 评论模型
model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
}

// 附件模型
model Attachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  type      String
  size      Int
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
}

// 标签模型
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String?
  tasks     Task[]
}

// 通知模型
model Notification {
  id        String   @id @default(cuid())
  title     String
  content   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

// 课程分类模型
model CourseCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String?
  parent      CourseCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    CourseCategory[] @relation("CategoryHierarchy")
  courses     Course[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([parentId])
}

// 课程时间表模型
model CourseSchedule {
  id          String   @id @default(cuid())
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  dayOfWeek   Int      // 1-7 表示周一到周日
  startTime   String   // 格式：HH:mm
  endTime     String   // 格式：HH:mm
  location    String?
  room        String?
  teacherId   String
  teacher     User     @relation("ScheduleTeacher", fields: [teacherId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId])
  @@index([teacherId])
}

// 课程资源模型
model CourseResource {
  id          String   @id @default(cuid())
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  title       String
  description String?
  type        String   // 文档、视频、作业等
  url         String
  size        Int?
  format      String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId])
}

// 课程文件模型
model CourseFile {
  id        String   @id @default(cuid())
  name      String
  type      String
  size      Int
  url       String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

// 更新课程模型
model Course {
  id          String   @id @default(cuid())
  name        String
  description String?
  code        String   @unique // 课程代码
  categoryId  String
  category    CourseCategory @relation(fields: [categoryId], references: [id])
  startDate   DateTime
  endDate     DateTime
  status      String    @default("PLANNED")
  maxStudents Int?      // 最大学生数
  currentStudents Int?  // 当前学生数
  teacherId   String
  teacher     User     @relation("CourseTeacher", fields: [teacherId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tasks       Task[]
  schedules   CourseSchedule[]
  resources   CourseResource[]
  files       CourseFile[]

  @@index([categoryId])
  @@index([teacherId])
  @@index([status])
}

// 任务依赖关系模型
model TaskDependency {
  id          String   @id @default(cuid())
  taskId      String
  task        Task     @relation("TaskDependencies", fields: [taskId], references: [id])
  dependsOnId String
  dependsOn   Task     @relation("DependentOn", fields: [dependsOnId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([taskId, dependsOnId])
}

// 系统日志模型
model SystemLog {
  id        String   @id @default(cuid())
  action    String
  details   String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  ip        String?
  userAgent String?
}

// 数据备份模型
model Backup {
  id          String   @id @default(cuid())
  filename    String
  path        String
  size        Int
  type        String    @default("FULL")
  status      String    @default("PENDING")
  createdAt   DateTime @default(now())
  completedAt DateTime?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
}

// 数据导入导出记录
model ImportExport {
  id          String   @id @default(cuid())
  type        String
  filename    String
  status      String    @default("PENDING")
  details     String?
  createdAt   DateTime @default(now())
  completedAt DateTime?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
} 