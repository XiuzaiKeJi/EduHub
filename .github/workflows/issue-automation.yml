name: Issue自动化

on:
  issues:
    types: [opened, edited, closed, reopened, assigned, unassigned, labeled, unlabeled]
  pull_request:
    types: [opened, closed]

permissions:
  issues: write
  pull-requests: write

jobs:
  triage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: 自动处理Issue
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            if (!issue) return;
            
            // 获取里程碑
            const milestones = await github.rest.issues.listMilestones({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            const sprint1Milestone = milestones.data.find(m => m.title === 'Sprint 1');
            if (!sprint1Milestone) return;
            
            // 如果Issue没有里程碑，添加到Sprint 1
            if (!issue.milestone) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                milestone: sprint1Milestone.number
              });
            }
            
            // 根据事件类型添加状态标签
            if (context.payload.action === 'opened') {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['status:backlog']
              });
            }
            
            if (context.payload.action === 'assigned') {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['status:todo']
              });
            }
            
            if (context.payload.action === 'closed') {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['status:done']
              });
            }

      - name: 自动标签
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            if (!issue) return;
            
            // 根据标题添加标签
            const title = issue.title.toLowerCase();
            const labels = [];
            
            if (title.startsWith('feat:')) {
              labels.push('enhancement');
              labels.push('feature');
            }
            else if (title.startsWith('fix:')) {
              labels.push('bug');
            }
            else if (title.startsWith('chore:')) {
              labels.push('technical');
            }
            
            // 添加优先级标签
            if (title.includes('urgent') || title.includes('紧急')) {
              labels.push('priority:high');
            }
            
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: labels
              });
            }

      - name: 自动项目看板
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            if (!issue) return;
            
            // 使用GraphQL API添加Issue到项目
            const addToProject = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item {
                    id
                  }
                }
              }
            `;
            
            try {
              // 替换为实际的项目ID
              const projectId = 'PVT_kwDOLXXXXX';  // 请将此处替换为实际的项目ID
              
              await github.graphql(addToProject, {
                projectId: projectId,
                contentId: issue.node_id
              });
            } catch (error) {
              console.log('Error adding issue to project:', error);
            } 